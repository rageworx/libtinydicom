# Makefile for libtinydicom . LLVM or MacOS
# (C)2016, 2021 Raphael Kim / rageworx
#

# Compiler configure.
GCC = llvm-gcc
GPP = llvm-g++
AR  = ar
RL  = ranlib

RESDIR    = ./res
SOURCEDIR = ./src
LIBSRCDIR = ./src_lib
OUTDIR    = ./lib
ARCHOPT   =

ARCH = $(shell uname -m)

ifeq ($(ARCH),arm64)
	ARCHOPT += -arch x86_64 -arch arm64
endif

ifeq (debug,$(firstword $(MAKECMDGOALS)))
	OBJDIR := ./obj/Debug
	OUTBIN := ./libtinydicomd.a
else
	OBJDIR := ./obj/Release
	OUTBIN := libtinydicom.a
endif

# Make all source code be compiled ..
SRCS = $(wildcard $(SOURCEDIR)/*.cpp)
OBJS = $(SRCS:$(SOURCEDIR)/%.cpp=$(OBJDIR)/%.o)
LOBJ = $(OBJDIR)/libdcm.o

DEFINEOPT += -DLIB_EXPORT_ENABLE
CFLAGS    += -I$(SOURCEDIR) -I$(LIBSRCDIR) -I$(RESDIR)
CFLAGS    += $(DEFINEOPT) $(ARCHOPT) $(MOREOPT)

all: prepare clean ${OUTDIR}/${OUTBIN}

debug: all

prepare:
	@mkdir -p ${OBJDIR}
	@mkdir -p ${OUTDIR}

clean:
	@rm -rf ${OBJDIR}/*
	@rm -rf ${OUTDIR}/${OUTBIN}

$(OBJS): $(OBJDIR)/%.o: $(SOURCEDIR)/%.cpp
	@echo "building $@ ..."
	@$(GPP) $(CFLAGS) -c $< -o $@

$(LOBJ):
	@echo "building export $@ ..."
	@$(GPP) $(CFLAGS) -c $(LIBSRCDIR)/libdcm.cpp -o $@

$(OUTDIR)/$(OUTBIN): $(OBJS) $(LOBJ)
	@echo "generating $@ ..."
	@$(AR) -cr $@ $^
	@$(RL) $@
	@echo "copying headers ..."
	@cp src_lib/*.h $(OUTDIR)
	@echo "done."
