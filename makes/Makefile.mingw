# Makefile for libtinydicom
# (C)2023 Raphael Kim / rageworx
#

# To enable build for embedded linux, you may encomment next 2 lines.
# CCPREPATH = ${ARM_LINUX_GCC_PATH}
# CCPREFIX  = arm-linux-

# To enable build for embedded linux, change following line.
# CCPATH    = ${CCPREPATH}/${CCPREFIX}
CCPATH =

# Compiler configure.
GCC = ${CCPATH}gcc
GPP = ${CCPATH}g++
AR  = ${CCPATH}ar

SOURCEDIR = ./src
LIBSRCDIR = ./src_lib
RESDIR    = ./res
OUTDIR    = ./lib
INSTDIR   = /usr/local
INSTDIRL  = $(INSTDIR)/lib
INSTDIRH  = $(INSTDIR)/include

ifeq (debug,$(firstword $(MAKECMDGOALS)))
	OBJDIR := ./obj/Debug
	OUTBIN := ./libtinydicomd.a
else
	OBJDIR := ./obj/Release
	OUTBIN := libtinydicom.a
endif

# Make all source code be compiled ..
SRCS = $(wildcard $(SOURCEDIR)/*.cpp)
OBJS = $(SRCS:$(SOURCEDIR)/%.cpp=$(OBJDIR)/%.o)
LOBJ = $(OBJDIR)/libdcm.o

DEFINEOPT = -DLIB_EXPORT_ENABLE -DUNICODE -D_UNICODE

ifeq (debug,$(firstword $(MAKECMDGOALS)))
	OPTIMIZEOPT :=
	MOREOPT := -g
else
	OPTIMIZEOPT := -O3 -s
	MOREOPT :=
endif

CFLAGS += -I$(SOURCEDIR) -I$(LIBSRCDIR) -I$(RESDIR)
CFLAGS += $(DEFINEOPT) $(OPTIMIZEOPT) $(MOREOPT)

all: prepare clean ${OUTDIR}/${OUTBIN}

debug: all

prepare:
	@mkdir -p ${OBJDIR}
	@mkdir -p ${OUTDIR}

clean:
	@rm -rf ${OBJDIR}/*
	@rm -rf ${OUTDIR}/${OUTBIN}

install: $(OUTDIR)/$(OUTBIN)
	@echo "Installing ..."
	@cp -f $< $(INSTDIRL)
	@cp -f $(LIBSRCDIR)/libdcm.h $(INSTDIRH)

uninstall: $(INSTDIRL)/$(OUTBIN)
	@echo "Uninstalling ..."
	@rm -f $<
	@rm -f $(INSTDIRH)/libdcm.h

$(OBJS): $(OBJDIR)/%.o: $(SOURCEDIR)/%.cpp
	@echo "building $@ ..."
	@$(GPP) $(CFLAGS) -c $< -o $@

$(LOBJ): $(LIBSRCDIR)/libdcm.cpp
	@echo "building export $@ ..."
	@$(GPP) -I$(LIBSRCDIR) $(CFLAGS) -c $< -o $@

$(OUTDIR)/$(OUTBIN): $(OBJS) $(LOBJ)
	@echo "generating $@ ..."
	@$(AR) -q $@ $(OBJDIR)/*.o
	@echo "copying headers ..."
	@cp src_lib/libdcm.h $(OUTDIR)
	@echo "done."
